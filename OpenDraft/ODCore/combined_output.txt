

** Viewport.axaml **
Path: .\Viewport.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="OpenDraft.Viewport">
</UserControl>





** Viewport.axaml.cs **
Path: .\Viewport.axaml.cs

using Avalonia;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Media;
using OpenDraft.ODCore.ODData;
using OpenDraft.ODCore.ODEditor;
using OpenDraft.ODCore.ODGeometry;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace OpenDraft
{
    public class ViewportCamera
    {
        public Point Position { get; set; }
        public float Scale { get; set; }

        public ViewportCamera(Point? position = null, float scale = 1.0f)
        {
            Position = position ?? new Point(0, 0);
            Scale = scale;
        }

        public void MoveBy(Vector delta) => Position += new Point(delta.X, delta.Y);
    }

    public partial class Viewport : UserControl
    {
        public static readonly StyledProperty<IEnumerable<ODElement>> ElementsProperty =
            AvaloniaProperty.Register<Viewport, IEnumerable<ODElement>>(nameof(Elements));

        public static readonly StyledProperty<ODLayerManager> LayerManagerProperty =
            AvaloniaProperty.Register<Viewport, ODLayerManager>(nameof(LayerManager));

        public static readonly StyledProperty<ODEditor> EditorProperty =
            AvaloniaProperty.Register<Viewport, ODEditor>(nameof(Editor));

        public IEnumerable<ODElement> Elements
        {
            get => GetValue(ElementsProperty);
            set => SetValue(ElementsProperty, value);
        }

        public ODLayerManager LayerManager
        {
            get => GetValue(LayerManagerProperty);
            set => SetValue(LayerManagerProperty, value);
        }

        public ODEditor Editor
        {
            get => GetValue(EditorProperty);
            set => SetValue(EditorProperty, value);
        }

        private readonly ViewportCamera Camera = new();
        private bool isPanning = false;
        private Point _lastPointerDragPosition;
        private Point _mousePosition;
        private Size _lastSize;
        private bool _isInitialized = false;

        public Viewport()
        {
            InitializeComponent();

            Background = Brushes.Transparent;

            PointerPressed += OnPointerPressed;
            PointerReleased += OnPointerReleased;
            PointerMoved += OnPointerMoved;
            PointerWheelChanged += OnPointerWheelChanged;

            InvalidateVisual();
        }

        protected override Size ArrangeOverride(Size finalSize)
        {
            if (!_isInitialized && finalSize.Width > 0 && finalSize.Height > 0)
            {
                // Center camera initially
                Camera.Position = new Point(-finalSize.Width / 2 / Camera.Scale,
                                            -finalSize.Height / 2 / Camera.Scale);
                _lastSize = finalSize;
                _isInitialized = true;
                InvalidateVisual();
            }
            else if (_isInitialized && finalSize != _lastSize)
            {
                // Keep view centered on resize
                Camera.Position -= new Point(
                    (finalSize.Width - _lastSize.Width) / 2 / Camera.Scale,
                    (finalSize.Height - _lastSize.Height) / 2 / Camera.Scale
                );
                _lastSize = finalSize;
                InvalidateVisual();
            }

            return base.ArrangeOverride(finalSize);
        }

        private void OnPointerPressed(object? sender, PointerPressedEventArgs e)
        {
            if (e.GetCurrentPoint(this).Properties.IsMiddleButtonPressed)
            {
                _lastPointerDragPosition = e.GetPosition(this);
                isPanning = true;
            }
        }

        private void OnPointerReleased(object? sender, PointerReleasedEventArgs e)
        {
            if (e.InitialPressMouseButton == MouseButton.Left)
            {
                Point worldPos = GetWorldMousePosition();
                Debug.WriteLine($"Left click released at: ({worldPos.X}, {worldPos.Y})");

                // Send to editor if it's waiting for input
                if (Editor != null)
                {
                    var odPoint = new ODPoint(worldPos.X, worldPos.Y);
                    Debug.WriteLine($"Sending point to editor: ({odPoint.X}, {odPoint.Y})");
                    Editor.SendPoint(odPoint);
                    e.Handled = true; // Prevent normal processing
                }
            }
            
            if (e.InitialPressMouseButton == MouseButton.Middle)
                isPanning = false;

        }

        private void OnPointerMoved(object? sender, PointerEventArgs e)
        {
            _mousePosition = e.GetPosition(this);
            Point world = GetWorldMousePosition();
            Debug.WriteLine($"Mouse moved to: ({_mousePosition.X}, {_mousePosition.Y}) => World: ({world.X}, {world.Y})");


            if (!isPanning) return;

            Point current = e.GetPosition(this);
            Camera.MoveBy(new Vector(-(current.X - _lastPointerDragPosition.X) / Camera.Scale,
                                     (current.Y - _lastPointerDragPosition.Y) / Camera.Scale));
            _lastPointerDragPosition = current;

            InvalidateVisual();
        }

        private void OnPointerWheelChanged(object? sender, PointerWheelEventArgs e)
        {
            Point mousePos = e.GetPosition(this);

            float zoomFactor = 1.1f;
            float oldScale = Camera.Scale;
            float newScale = oldScale * (float)Math.Pow(zoomFactor, e.Delta.Y > 0 ? 1 : -1);

            Point ScreenToWorld(Point screen, float scale) =>
                new(screen.X / scale - Camera.Position.X, (Bounds.Height - screen.Y) / scale - Camera.Position.Y);

            var oldWorld = ScreenToWorld(mousePos, oldScale);
            var newWorld = ScreenToWorld(mousePos, newScale);

            Camera.Position += oldWorld - newWorld;
            Camera.Scale = newScale;

            InvalidateVisual();
        }

        public override void Render(DrawingContext context)
        {
            base.Render(context);

            var bounds = new Rect(0, 0, Bounds.Width, Bounds.Height);
            using (context.PushClip(bounds))
            {
                DrawScene(context);
            }
        }

        public Point GetScreenMousePosition()
        {
             return _mousePosition;
        }

        public Point GetWorldMousePosition()
        {
            return ScreenToWorld(_mousePosition);
        }

        private Point ScreenToWorld(Point screenPoint)
        {
            return new Point(
                screenPoint.X / Camera.Scale + Camera.Position.X,
                (Bounds.Height - screenPoint.Y) / Camera.Scale + Camera.Position.Y
            );
        }

        private void DrawScene(DrawingContext context)
        {
            var matrix = new Matrix(
                Camera.Scale, 0,
                0, -Camera.Scale,
                -Camera.Position.X * Camera.Scale,
                Camera.Position.Y * Camera.Scale + Bounds.Height
            );

            using (context.PushTransform(matrix))
            {
                foreach (var element in Elements)
                {
                    var layer = LayerManager?.GetLayerByID(element.LayerId);

                    if (layer != null)
                        element.Draw(context, layer);
                }
            }
        }
    }
}





** ODDataManager.cs **
Path: .\ODData\ODDataManager.cs

﻿using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODData
{
    public class ODDataManager
    {
        public ObservableCollection<ODGeometry.ODElement> Elements { get; } = new();
        public ODLayerManager LayerManager { get; } = new ODLayerManager();

        public ODDataManager()
        {

        }


        public void AddElement(ODGeometry.ODElement element)
        {
            element.LayerId = LayerManager.GetActiveLayer();
            Elements.Add(element);
        }
    }
}





** ODLayer.cs **
Path: .\ODData\ODLayer.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODData
{
    public class ODLayer
    {
        private ushort _id;
        public String Name { get; set; } = Guid.NewGuid().ToString();
        public String Color { get; set; } = "#FFFFFF";
        public String LineType { get; set; } = "Continuous";
        public float LineWeight { get; set; } = 0.6f;
        public bool IsVisible { get; set; } = true;
        public bool IsLocked { get; set; } = false;
        
        public ODLayer(ushort id, String name)
        {
            _id = id;
            Name = name;
        }

        public ushort getID()
        {
            return _id;
        }
    }
}





** ODLayerManager.cs **
Path: .\ODData\ODLayerManager.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODData
{
    public class ODLayerManager
    {
        private List<ODLayer> Layers { get; set; } = new List<ODLayer>();
        private ushort ActiveLayer { get; set; }

        public ODLayerManager()
        {
            // Add a default layer
            AddLayer("Default");
        }


        private ushort GetNextAvailableID()
        {
            HashSet<ushort> usedIDs = new HashSet<ushort>(Layers.Select(layer => layer.getID()));
            for (ushort id = 0; id < ushort.MaxValue; id++)
            {
                if (!usedIDs.Contains(id))
                    return id;
            }
            throw new InvalidOperationException("No available layer IDs.");
        }


        public ushort GetActiveLayer()
        {
            return ActiveLayer;
        }


        public ushort AddLayer(string name)
        {
            ushort newID = GetNextAvailableID();

            ODLayer newLayer = new ODLayer(newID, name);
            Layers.Add(newLayer);
            return newID;
        }

        public ODLayer? GetLayerByName(string name)
        {
            return Layers.FirstOrDefault(layer => layer.Name == name);
        }

        public ODLayer? GetLayerByID(ushort id)
        {
            return Layers.FirstOrDefault(layer => layer.getID() == id);
        }

        public void SetActiveLayer(string name)
        {
            ODLayer? layer = GetLayerByName(name);
            if (layer != null)
            {
                ActiveLayer = layer.getID();
            }
            else
            {
                throw new ArgumentException($"Layer with name '{name}' does not exist.");
            }
        }

        public void RemoveLayer(string name)
        {
            ODLayer? layerToRemove = GetLayerByName(name);

            if (layerToRemove != null)
            {
                if (ActiveLayer == layerToRemove.getID())
                {
                    SetActiveLayer("Default");
                }
                
                Layers.Remove(layerToRemove);
            }
        }
    }
}





** ODCommandAttribute.cs **
Path: .\ODEditor\ODCommandAttribute.cs

﻿// ODCommandAttribute.cs
using System;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    public class ODCommandAttribute : Attribute
    {
        public string Name { get; }
        public string Description { get; }
        public string[] Aliases { get; }

        public ODCommandAttribute(string name, string description = "", params string[] aliases)
        {
            Name = name;
            Description = description;
            Aliases = aliases;
        }
    }
}




** ODEditor.cs **
Path: .\ODEditor\ODEditor.cs

﻿// ODEditor.cs
using Avalonia.Threading;
using OpenDraft.ODCore.ODEditor.ODCommands;
using OpenDraft.ODCore.ODData;
using OpenDraft.ODCore.ODGeometry;
using System;
using System.Threading.Tasks;
using System.Diagnostics;

namespace OpenDraft.ODCore.ODEditor
{
    public class ODEditor : IDisposable
    {
        private readonly ODCommandRegistry _commandRegistry;
        private readonly ODDataManager _dataManager;

        // Input ports - only one active at a time
        private TaskCompletionSource<ODPoint>? _pointWaiter;
        private TaskCompletionSource<double>? _numberWaiter;
        private TaskCompletionSource<string>? _textWaiter;
        private TaskCompletionSource<string>? _choiceWaiter;

        // Current command
        private Task _currentCommandTask;

        public event EventHandler<string> StatusMessageChanged;
        public event EventHandler<string> ShowMessageRequested;
        public event EventHandler<bool> InputModeChanged; // true = waiting, false = normal

        public ODEditor(ODDataManager dataManager)
        {
            _dataManager = dataManager;
            _commandRegistry = new ODCommandRegistry();

            // Register commands from current assembly
            _commandRegistry.RegisterAssembly(typeof(ODEditor).Assembly);
        }

        // Public command execution
        public void ExecuteCommand(string commandName)
        {
            Debug.WriteLine("ExecuteCommand called with: " + commandName);

            if (_currentCommandTask != null && !_currentCommandTask.IsCompleted)
            {
                ShowMessage("Another command is already running");
                return;
            }

            var command = _commandRegistry.CreateCommand(commandName);
            if (command == null)
            {
                SetStatus($"Unknown command: {commandName}");
                return;
            }

            var gateway = new ODEditorGateway(this, _dataManager);

            _currentCommandTask = Task.Run(async () =>
            {
                try
                {
                    SetStatus($"Starting {commandName}...");
                    await command.ExecuteAsync(gateway);
                }
                catch (TaskCanceledException)
                {
                    SetStatus($"{commandName} cancelled");
                }
                catch (Exception ex)
                {
                    SetStatus($"Error in {commandName}: {ex.Message}");
                }
                finally
                {
                    CloseAllPorts();
                    InputModeChanged?.Invoke(this, false);
                }
            });
        }

        // Input port methods - called by commands
        public Task<ODPoint> WaitForPointAsync()
        {
            CloseAllPorts();
            _pointWaiter = new TaskCompletionSource<ODPoint>();
            InputModeChanged?.Invoke(this, true);
            return _pointWaiter.Task;
        }

        public Task<double> WaitForNumberAsync()
        {
            CloseAllPorts();
            _numberWaiter = new TaskCompletionSource<double>();
            InputModeChanged?.Invoke(this, true);
            return _numberWaiter.Task;
        }

        public Task<string> WaitForTextAsync()
        {
            CloseAllPorts();
            _textWaiter = new TaskCompletionSource<string>();
            InputModeChanged?.Invoke(this, true);
            return _textWaiter.Task;
        }

        public Task<string> WaitForChoiceAsync(string[] options)
        {
            CloseAllPorts();
            _choiceWaiter = new TaskCompletionSource<string>();
            InputModeChanged?.Invoke(this, true);
            // You might want to show the options in UI
            SetStatus($"Options: {string.Join(", ", options)}");
            return _choiceWaiter.Task;
        }

        // Input gateway methods - called by viewport
        public void SendPoint(ODPoint point)
        {
            _pointWaiter?.TrySetResult(point);
            CloseAllPorts();
        }

        public void SendNumber(double number)
        {
            _numberWaiter?.TrySetResult(number);
            CloseAllPorts();
        }

        public void SendText(string text)
        {
            _textWaiter?.TrySetResult(text);
            CloseAllPorts();
        }

        public void SendChoice(string choice)
        {
            _choiceWaiter?.TrySetResult(choice);
            CloseAllPorts();
        }

        public void CancelInput()
        {
            _pointWaiter?.TrySetCanceled();
            _numberWaiter?.TrySetCanceled();
            _textWaiter?.TrySetCanceled();
            _choiceWaiter?.TrySetCanceled();
            CloseAllPorts();
        }

        private void CloseAllPorts()
        {
            _pointWaiter = null;
            _numberWaiter = null;
            _textWaiter = null;
            _choiceWaiter = null;
            InputModeChanged?.Invoke(this, false);
        }

        // Status methods
        public void SetStatus(string message)
        {
            Debug.WriteLine("SetStatus: " + message);

            Dispatcher.UIThread.Post(() =>
            {
                StatusMessageChanged?.Invoke(this, message);
            });
        }

        public void ShowMessage(string message)
        {
            Debug.WriteLine("ShowMessage: " + message);

            Dispatcher.UIThread.Post(() =>
            {
                ShowMessageRequested?.Invoke(this, message);
            });
        }

        public void Dispose()
        {
            CancelInput();
            _currentCommandTask?.Dispose();
        }
    }
}




** IODEditorCommand.cs **
Path: .\ODEditor\ODCommands\IODEditorCommand.cs

﻿using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    public interface IODEditorCommand
    {
        string Name { get; }
        string Description { get; }
        Task ExecuteAsync(IODEditorGateway editor);
    }
}




** IODEditorGateway.cs **
Path: .\ODEditor\ODCommands\IODEditorGateway.cs

﻿using OpenDraft.ODCore.ODData;
using OpenDraft.ODCore.ODGeometry;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    public interface IODEditorGateway
    {
        ODDataManager DataManager { get; }

        Task<ODPoint> GetPointAsync(string prompt);
        Task<double> GetNumberAsync(string prompt);
        Task<string> GetTextAsync(string prompt);
        Task<string> GetChoiceAsync(string prompt, params string[] options);

        void SetStatus(string message);
        void ShowMessage(string message);
    }
}




** ODBaseEditorCommand.cs **
Path: .\ODEditor\ODCommands\ODBaseEditorCommand.cs

﻿// ODBaseEditorCommand.cs
using System;
using System.Reflection;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    public abstract class ODBaseEditorCommand : IODEditorCommand
    {
        private readonly Lazy<ODCommandAttribute> _attribute;

        public string Name => _attribute.Value.Name;
        public string Description => _attribute.Value.Description;

        protected ODBaseEditorCommand()
        {
            _attribute = new Lazy<ODCommandAttribute>(() =>
            {
                var attribute = GetType().GetCustomAttribute<ODCommandAttribute>();
                if (attribute == null)
                {
                    throw new InvalidOperationException(
                        $"Command {GetType().Name} must be decorated with [ODCommand] attribute");
                }
                return attribute;
            });
        }

        public abstract Task ExecuteAsync(IODEditorGateway editor);
    }
}




** ODCircleCommand.cs **
Path: .\ODEditor\ODCommands\ODCircleCommand.cs

﻿// ODCircleCommand.cs
using OpenDraft.ODCore.ODEditor.ODCommands;
using OpenDraft.ODCore.ODGeometry;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    [ODCommand("CIRCLE", "Creates a circle", "C")]
    public class ODCircleCommand : ODBaseEditorCommand  // or just implement IODEditorCommand directly
    {
        public override async Task ExecuteAsync(IODEditorGateway editor)
        {
            // This is exactly your ideal flow!
            var center = await editor.GetPointAsync("Specify center point:");
            var radius = await editor.GetNumberAsync("Specify radius:");

            var circle = new ODCircle(center, radius);
            editor.DataManager.AddElement(circle);

            editor.SetStatus("Circle created successfully");
        }
    }
}




** ODCommandRegistry.cs **
Path: .\ODEditor\ODCommands\ODCommandRegistry.cs

﻿// ODCommandRegistry.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    public class ODCommandRegistry
    {
        private readonly Dictionary<string, Type> _commands = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);

        public void RegisterAssembly(Assembly assembly)
        {
            var commandTypes = assembly.GetTypes()
                .Where(t => typeof(IODEditorCommand).IsAssignableFrom(t) && !t.IsAbstract)
                .Where(t => t.GetCustomAttribute<ODCommandAttribute>() != null);

            foreach (var type in commandTypes)
            {
                var attribute = type.GetCustomAttribute<ODCommandAttribute>();
                if (attribute != null)
                {
                    _commands[attribute.Name] = type;

                    foreach (var alias in attribute.Aliases)
                    {
                        _commands[alias] = type;
                    }
                }
            }
        }

        public void RegisterCommand<T>(string name, params string[] aliases) where T : IODEditorCommand
        {
            _commands[name] = typeof(T);
            foreach (var alias in aliases)
            {
                _commands[alias] = typeof(T);
            }
        }

        public IODEditorCommand? CreateCommand(string commandName)
        {
            if (_commands.TryGetValue(commandName, out var commandType))
            {
                return (IODEditorCommand)Activator.CreateInstance(commandType);
            }
            return null;
        }

        public IEnumerable<string> GetRegisteredCommandNames()
        {
            return _commands.Keys.Distinct();
        }

        public string GetCommandDescription(string commandName)
        {
            if (_commands.TryGetValue(commandName, out var type))
            {
                var attribute = type.GetCustomAttribute<ODCommandAttribute>();
                return attribute?.Description ?? string.Empty;
            }
            return string.Empty;
        }
    }
}




** ODEditorGateway.cs **
Path: .\ODEditor\ODCommands\ODEditorGateway.cs

﻿using OpenDraft.ODCore.ODData;
using OpenDraft.ODCore.ODGeometry;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    public class ODEditorGateway : IODEditorGateway
    {
        private readonly ODEditor _editor;

        public ODDataManager DataManager { get; }

        public ODEditorGateway(ODEditor editor, ODDataManager dataManager)
        {
            _editor = editor;
            DataManager = dataManager;
        }

        public Task<ODPoint> GetPointAsync(string prompt)
        {
            _editor.SetStatus(prompt);
            return _editor.WaitForPointAsync();
        }

        public Task<double> GetNumberAsync(string prompt)
        {
            _editor.SetStatus(prompt);
            return _editor.WaitForNumberAsync();
        }

        public Task<string> GetTextAsync(string prompt)
        {
            _editor.SetStatus(prompt);
            return _editor.WaitForTextAsync();
        }

        public Task<string> GetChoiceAsync(string prompt, params string[] options)
        {
            _editor.SetStatus(prompt);
            return _editor.WaitForChoiceAsync(options);
        }

        public void SetStatus(string message)
        {
            _editor.SetStatus(message);
        }

        public void ShowMessage(string message)
        {
            _editor.ShowMessage(message);
        }
    }
}




** ODLineCommand.cs **
Path: .\ODEditor\ODCommands\ODLineCommand.cs

﻿using OpenDraft.ODCore.ODEditor.ODCommands;
using OpenDraft.ODCore.ODGeometry;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODEditor.ODCommands
{
    [ODCommand("LINE", "Creates a line", "L")]
    public class ODLineCommand : ODBaseEditorCommand
    {
        public override async Task ExecuteAsync(IODEditorGateway editor)
        {
            // Get first point
            var startPoint = await editor.GetPointAsync("Specify first point:");

            // Get second point  
            var endPoint = await editor.GetPointAsync("Specify second point:");

            // Create and register the line
            var line = new ODLine(startPoint, endPoint);
            editor.DataManager.AddElement(line);

            editor.SetStatus("Line created successfully");
        }
    }
}




** ODCircle.cs **
Path: .\ODGeometry\ODCircle.cs

﻿using Avalonia;
using Avalonia.Media;
using OpenDraft.ODCore.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODGeometry
{
    internal class ODCircle : ODElement
    {
        public ODPoint Center { get; set; }
        public double Radius { get; set; }

        public ODCircle(ODPoint center, double radius)
        {
            Center = center;
            Radius = radius;
        }

        public override void Draw(DrawingContext context, ODLayer layer)
        {
            context.DrawEllipse(
                Brushes.Red, new Pen(Brushes.Red, 0.1),
                new Point(50, 50),
                0.4, 0.4
            );
        }
    }
}





** ODElement.cs **
Path: .\ODGeometry\ODElement.cs

﻿using Avalonia;
using Avalonia.Media;
using OpenDraft.ODCore.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODGeometry
{
    public class ODElement
    {
        public Guid Id { get; set; }
        public ushort LayerId { get; set; } = 0; // Default layer ID

        public ODElement()
        {
            Id = Guid.NewGuid();
        }

        public virtual void Draw(DrawingContext context, ODLayer layer)
        {
            // Base draw method, to be overridden by derived classes
        }

    }
}





** ODLine.cs **
Path: .\ODGeometry\ODLine.cs

﻿using Avalonia;
using Avalonia.Controls.Shapes;
using Avalonia.Media;
using OpenDraft.ODCore.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODGeometry
{
    internal class ODLine : ODElement
    {
        public ODPoint StartPoint { get; set; }
        public ODPoint EndPoint { get; set; }


        public ODLine(ODPoint startPoint, ODPoint endPoint)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
        }


        public override void Draw(DrawingContext context, ODLayer layer)
        {
            if (layer != null && !layer.IsVisible)
                return;

            if (layer == null)
                return;
            
            Pen pen = new Pen(new SolidColorBrush(Color.Parse(layer.Color)), layer.LineWeight);

            context.DrawLine(pen,
                    new Point(StartPoint.X, StartPoint.Y),
                    new Point(EndPoint.X, EndPoint.Y));
        }

    }
}





** ODPoint.cs **
Path: .\ODGeometry\ODPoint.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODGeometry
{
    public class ODPoint : ODElement
    {
        public float X { get; set; }
        public float Y { get; set; }
        public ODPoint(double x, double y)
        {
            X = (float)x;
            Y = (float)y;
        }

        public ODPoint(float x, float y)
        {
            X = x;
            Y = y;
        }
    }
}





** ODMath.cs **
Path: .\ODMath\ODMath.cs

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.ODCore.ODMath
{
    public class Vector2
        {
        public float X { get; set; }
        public float Y { get; set; }
        public Vector2(float x, float y)
        {
            X = x;
            Y = y;
        }
        public static Vector2 operator +(Vector2 a, Vector2 b)
        {
            return new Vector2(a.X + b.X, a.Y + b.Y);
        }

        public static Vector2 operator -(Vector2 a, Vector2 b)
        {
            return new Vector2(a.X - b.X, a.Y - b.Y);
        }

        public static Vector2 operator *(Vector2 a, float scalar)
        {
            return new Vector2(a.X * scalar, a.Y * scalar);
        }
        
        public static Vector2 operator /(Vector2 a, float scalar)
        {
            if (scalar == 0)
                throw new DivideByZeroException("Cannot divide by zero.");
            return new Vector2(a.X / scalar, a.Y / scalar);
        }
        
        public float Magnitude()
        {
            return (float)Math.Sqrt(X * X + Y * Y);
        }
        
        public Vector2 Normalize()
        {
            float magnitude = Magnitude();
            if (magnitude == 0)
                throw new InvalidOperationException("Cannot normalize a zero vector.");
            return this / magnitude;
        }
        
        public override string ToString()
        {
            return $"({X}, {Y})";
        }
    }
}



