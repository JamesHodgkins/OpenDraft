

** App.axaml **
Path: .\OpenDraft\App.axaml

<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="OpenDraft.App"
             xmlns:local="using:OpenDraft"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
  
    <Application.Styles>
        <FluentTheme />
    </Application.Styles>
</Application>




** App.axaml.cs **
Path: .\OpenDraft\App.axaml.cs

using System.Linq;
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Data.Core;
using Avalonia.Data.Core.Plugins;
using Avalonia.Markup.Xaml;
using OpenDraft.ViewModels;
using OpenDraft.Views;

namespace OpenDraft
{
    public partial class App : Application
    {
        public override void Initialize()
        {
            AvaloniaXamlLoader.Load(this);
        }

        public override void OnFrameworkInitializationCompleted()
        {
            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                // Avoid duplicate validations from both Avalonia and the CommunityToolkit. 
                // More info: https://docs.avaloniaui.net/docs/guides/development-guides/data-validation#manage-validationplugins
                DisableAvaloniaDataAnnotationValidation();
                desktop.MainWindow = new MainWindow
                {
                    DataContext = new MainWindowViewModel(),
                };
            }

            base.OnFrameworkInitializationCompleted();
        }

        private void DisableAvaloniaDataAnnotationValidation()
        {
            // Get an array of plugins to remove
            var dataValidationPluginsToRemove =
                BindingPlugins.DataValidators.OfType<DataAnnotationsValidationPlugin>().ToArray();

            // remove each entry found
            foreach (var plugin in dataValidationPluginsToRemove)
            {
                BindingPlugins.DataValidators.Remove(plugin);
            }
        }
    }
}




** Program.cs **
Path: .\OpenDraft\Program.cs

ï»¿using System;
using Avalonia;

namespace OpenDraft
{
    internal sealed class Program
    {
        // Initialization code. Don't use any Avalonia, third-party APIs or any
        // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
        // yet and stuff might break.
        [STAThread]
        public static void Main(string[] args) => BuildAvaloniaApp()
            .StartWithClassicDesktopLifetime(args);

        // Avalonia configuration, don't remove; also used by visual designer.
        public static AppBuilder BuildAvaloniaApp()
            => AppBuilder.Configure<App>()
                .UsePlatformDetect()
                .WithInterFont()
                .LogToTrace();
    }
}





** ViewLocator.cs **
Path: .\OpenDraft\ViewLocator.cs

using System;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using OpenDraft.ViewModels;

namespace OpenDraft
{
    public class ViewLocator : IDataTemplate
    {

        public Control? Build(object? param)
        {
            if (param is null)
                return null;

            var name = param.GetType().FullName!.Replace("ViewModel", "View", StringComparison.Ordinal);
            var type = Type.GetType(name);

            if (type != null)
            {
                return (Control)Activator.CreateInstance(type)!;
            }

            return new TextBlock { Text = "Not Found: " + name };
        }

        public bool Match(object? data)
        {
            return data is ViewModelBase;
        }
    }
}





** Viewport.axaml **
Path: .\OpenDraft\Core\Viewport.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="OpenDraft.Viewport">
</UserControl>





** Viewport.axaml.cs **
Path: .\OpenDraft\Core\Viewport.axaml.cs

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Shapes;
using Avalonia.Input;
using Avalonia.Media;
using OpenDraft.Core.ODData;
using OpenDraft.Core.ODGeometry;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection.Metadata;

namespace OpenDraft
{
    public class ViewportCamera
    {
        public Point Position { get; set; }
        public float Scale { get; set; }

        public ViewportCamera()
        {
            Position = new Point(0,0);
            Scale = 1.0f;
        }

        public void MoveBy(float dX, float dY)
        {
            Position = new Point(Position.X + dX, Position.Y + dY);
        }
    }

    public partial class Viewport : UserControl
    {

        public static readonly StyledProperty<IEnumerable<ODElement>> ElementsProperty =
            AvaloniaProperty.Register<Viewport, IEnumerable<ODElement>>(nameof(Elements));

        public static readonly StyledProperty<ODLayerManager> LayerManagerProperty =
            AvaloniaProperty.Register<Viewport, ODLayerManager>(nameof(LayerManager));


        public IEnumerable<ODElement> Elements
        {
            get => GetValue(ElementsProperty);
            set => SetValue(ElementsProperty, value);
        }

        // Add LayerManager property
        public ODLayerManager LayerManager
        {
            get => GetValue(LayerManagerProperty);
            set => SetValue(LayerManagerProperty, value);
        }


        ViewportCamera Camera = new ViewportCamera();
        bool isPanning = false;
        Point _lastPointerPosition = new Point(0, 0);
        Point _lastSize = new Point(0, 0);
        private bool _isInitialized = false; // Flag to run setup only once


        public Viewport()
        {
            InitializeComponent();
            
            // Set up event handlers
            this.Background = Brushes.Transparent;
            this.PointerPressed += OnPointerPressed;
            this.PointerWheelChanged += OnPointerWheelChanged;
            this.PointerReleased += OnPointerReleased;
            this.PointerMoved += OnPointerMoved;
            
            /*
            // Get window size
            _lastSize = <<NEED SIZE OF CONTROL HERE>>
            Debug.WriteLine($"Initial size: {_lastSize.ToString()}");

            // Centre the camera
            Camera.Position = new Point(
                -(_lastSize.X / 2) * Camera.Scale,
                -(_lastSize.Y / 2) * Camera.Scale
            );
            */

            InvalidateVisual();
        }



        /* Events */

        private static void OnElementsChanged(AvaloniaObject d, AvaloniaPropertyChangedEventArgs e)
        {
            Debug.WriteLine("Elements property changed, invalidating visual.");
            // 'd' is the control itself. We check if it's a Viewport.
            if (d is Viewport viewport)
            {
                viewport.InvalidateVisual();
            }
        }

        protected override Size ArrangeOverride(Size finalSize)
        {
            bool needsRedraw = false;

            // --- ONE-TIME INITIALIZATION ---
            // Check for a valid size (> 0) and that we haven't initialized yet.
            if (!_isInitialized && finalSize.Width > 0 && finalSize.Height > 0)
            {
                _lastSize = new Point(finalSize.Width, finalSize.Height);
                Debug.WriteLine($"Initial size detected: {_lastSize}");

                // Centre the camera using the initial size.
                // The camera's position is in world coordinates, so we divide by scale.
                Camera.Position = new Point(
                    -(_lastSize.X / 2) / Camera.Scale,
                    -(_lastSize.Y / 2) / Camera.Scale
                );

                _isInitialized = true;
                needsRedraw = true;
            }
            // --- SUBSEQUENT RESIZE HANDLING ---
            // Only run this if we are already initialized and the size has changed.
            else if (_isInitialized && (finalSize.Width != _lastSize.X || finalSize.Height != _lastSize.Y))
            {
                double changeInWidth = finalSize.Width - _lastSize.X;
                double changeInHeight = finalSize.Height - _lastSize.Y;

                // Adjust camera position to keep the view centered on resize
                Camera.Position = new Point(
                    Camera.Position.X - (changeInWidth / 2 / Camera.Scale),
                    Camera.Position.Y - (changeInHeight / 2 / Camera.Scale)
                );

                _lastSize = new Point(finalSize.Width, finalSize.Height);
                needsRedraw = true;
            }

            if (needsRedraw)
            {
                InvalidateVisual(); // Trigger a redraw if size has changed
            }

            return base.ArrangeOverride(finalSize);
        }

        private void OnPointerPressed(object? sender, PointerPressedEventArgs e)
        {
            var props = e.GetCurrentPoint(this).Properties;
            if (props.IsLeftButtonPressed)
            {
                System.Diagnostics.Debug.WriteLine($"Left mouse button DOWN");
            }
            else if (props.IsMiddleButtonPressed)
            {
                var point = e.GetPosition(this);
                isPanning = true;
                System.Diagnostics.Debug.WriteLine($"Middle mouse button DOWN at {point}");
            }
            else if (props.IsRightButtonPressed)
            {
                System.Diagnostics.Debug.WriteLine($"Right mouse button DOWN");
            }
        }

        private void OnPointerReleased(object? sender, PointerReleasedEventArgs e)
        {
            var point = e.GetPosition(this);

            switch (e.InitialPressMouseButton) // which button triggered the press
            {
                case MouseButton.Left:
                    System.Diagnostics.Debug.WriteLine($"Left mouse button UP at {point}");
                    break;

                case MouseButton.Middle:
                    isPanning = false; // reset panning here
                    System.Diagnostics.Debug.WriteLine($"Middle mouse button UP at {point}");
                    break;

                case MouseButton.Right:
                    System.Diagnostics.Debug.WriteLine($"Right mouse button UP at {point}");
                    break;
            }
        }

        private void OnPointerWheelChanged(object? sender, PointerWheelEventArgs e)
        {
            var mousePos = e.GetPosition(this);

            // Exponential zoom
            float zoomFactor = 1.1f;
            float zoomDirection = (float)e.Delta.Y > 0 ? 1f : -1f;
            float oldScale = Camera.Scale;
            float newScale = oldScale * (float)Math.Pow(zoomFactor, zoomDirection);

            // Calculate world position under cursor before zoom
            double worldX = (mousePos.X / oldScale) - Camera.Position.X;
            double worldY = ((Bounds.Height - mousePos.Y) / oldScale) - Camera.Position.Y; // Inverted Y

            // Calculate world position under cursor after zoom
            double newWorldX = (mousePos.X / newScale) - Camera.Position.X;
            double newWorldY = ((Bounds.Height - mousePos.Y) / newScale) - Camera.Position.Y; // Inverted Y

            // Adjust camera position to keep the world point under cursor fixed
            Camera.Position = new Point(
                Camera.Position.X + (worldX - newWorldX),
                Camera.Position.Y + (worldY - newWorldY)
            );

            Camera.Scale = newScale;
            InvalidateVisual();
        }


        private void OnPointerMoved(object? sender, PointerEventArgs e)
        {
            Point current = e.GetPosition(this);
            Point delta = current - _lastPointerPosition; // delta as a Vector

            if (isPanning)
            {
                Camera.MoveBy((float)-delta.X / Camera.Scale, (float)delta.Y / Camera.Scale);
                InvalidateVisual();

                Debug.WriteLine($"Camera position {Camera.Position.ToString()}");
            }

            _lastPointerPosition = current;

        }



        /* Rendering */

        public override void Render(DrawingContext context)
        {
            base.Render(context);
            var bounds = new Rect(0, 0, Bounds.Width, Bounds.Height);
            
            using (context.PushClip(bounds))
                drawScene(context);
            
        }



        private void drawScene(DrawingContext context)
        {
            // Create the camera transform matrix with inverted Y
            var matrix = new Matrix(
                Camera.Scale, 0,
                0, -Camera.Scale, // Negative for Y inversion
                -Camera.Position.X * Camera.Scale,
                (Camera.Position.Y * Camera.Scale) + Bounds.Height // Adjust for Y inversion
            );

            // Push the matrix directly
            using (context.PushTransform(matrix))
            {
                foreach (var element in Elements)
                {
                    ODLayer? layer = LayerManager.GetLayerByID(element.LayerId);

                    if (layer != null)
                        element.Draw(context, layer);
                }
            }
        }







    }
}





** ODDataManager.cs **
Path: .\OpenDraft\Core\ODData\ODDataManager.cs

ï»¿using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODData
{
    public class ODDataManager
    {
        public ObservableCollection<ODGeometry.ODElement> Elements { get; } = new();
        public ODLayerManager LayerManager { get; } = new ODLayerManager();

        public ODDataManager()
        {

        }


        public void AddElement(ODGeometry.ODElement element)
        {
            element.LayerId = LayerManager.GetActiveLayer();
            Elements.Add(element);
        }
    }
}





** ODLayer.cs **
Path: .\OpenDraft\Core\ODData\ODLayer.cs

ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODData
{
    public class ODLayer
    {
        private ushort _id;
        public String Name { get; set; } = Guid.NewGuid().ToString();
        public String Color { get; set; } = "#FFFFFF";
        public String LineType { get; set; } = "Continuous";
        public float LineWeight { get; set; } = 0.6f;
        public bool IsVisible { get; set; } = true;
        public bool IsLocked { get; set; } = false;
        
        public ODLayer(ushort id, String name)
        {
            _id = id;
            Name = name;
        }

        public ushort getID()
        {
            return _id;
        }
    }
}





** ODLayerManager.cs **
Path: .\OpenDraft\Core\ODData\ODLayerManager.cs

ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODData
{
    public class ODLayerManager
    {
        private List<ODLayer> Layers { get; set; } = new List<ODLayer>();
        private ushort ActiveLayer { get; set; }

        public ODLayerManager()
        {
            // Add a default layer
            AddLayer("Default");
        }


        private ushort GetNextAvailableID()
        {
            HashSet<ushort> usedIDs = new HashSet<ushort>(Layers.Select(layer => layer.getID()));
            for (ushort id = 0; id < ushort.MaxValue; id++)
            {
                if (!usedIDs.Contains(id))
                    return id;
            }
            throw new InvalidOperationException("No available layer IDs.");
        }


        public ushort GetActiveLayer()
        {
            return ActiveLayer;
        }


        public ushort AddLayer(string name)
        {
            ushort newID = GetNextAvailableID();

            ODLayer newLayer = new ODLayer(newID, name);
            Layers.Add(newLayer);
            return newID;
        }

        public ODLayer? GetLayerByName(string name)
        {
            return Layers.FirstOrDefault(layer => layer.Name == name);
        }

        public ODLayer? GetLayerByID(ushort id)
        {
            return Layers.FirstOrDefault(layer => layer.getID() == id);
        }

        public void SetActiveLayer(string name)
        {
            ODLayer? layer = GetLayerByName(name);
            if (layer != null)
            {
                ActiveLayer = layer.getID();
            }
            else
            {
                throw new ArgumentException($"Layer with name '{name}' does not exist.");
            }
        }

        public void RemoveLayer(string name)
        {
            ODLayer? layerToRemove = GetLayerByName(name);

            if (layerToRemove != null)
            {
                if (ActiveLayer == layerToRemove.getID())
                {
                    SetActiveLayer("Default");
                }
                
                Layers.Remove(layerToRemove);
            }
        }
    }
}





** ODCircle.cs **
Path: .\OpenDraft\Core\ODGeometry\ODCircle.cs

ï»¿using Avalonia;
using Avalonia.Media;
using OpenDraft.Core.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODGeometry
{
    internal class ODCircle : ODElement
    {


        public override void Draw(DrawingContext context, ODLayer layer)
        {
            context.DrawEllipse(
                Brushes.Red, new Pen(Brushes.Red, 0.1),
                new Point(50, 50),
                0.4, 0.4
            );
        }
    }
}





** ODElement.cs **
Path: .\OpenDraft\Core\ODGeometry\ODElement.cs

ï»¿using Avalonia;
using Avalonia.Media;
using OpenDraft.Core.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODGeometry
{
    public class ODElement
    {
        public Guid Id { get; set; }
        public ushort LayerId { get; set; } = 0; // Default layer ID

        public ODElement()
        {
            Id = Guid.NewGuid();
        }

        public virtual void Draw(DrawingContext context, ODLayer layer)
        {
            // Base draw method, to be overridden by derived classes
        }

    }
}





** ODLine.cs **
Path: .\OpenDraft\Core\ODGeometry\ODLine.cs

ï»¿using Avalonia;
using Avalonia.Controls.Shapes;
using Avalonia.Media;
using OpenDraft.Core.ODData;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODGeometry
{
    internal class ODLine : ODElement
    {
        public ODPoint StartPoint { get; set; }
        public ODPoint EndPoint { get; set; }


        public ODLine(ODPoint startPoint, ODPoint endPoint)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
        }


        public override void Draw(DrawingContext context, ODLayer layer)
        {
            if (layer != null && !layer.IsVisible)
                return;

            if (layer == null)
                return;
            
            Pen pen = new Pen(new SolidColorBrush(Color.Parse(layer.Color)), layer.LineWeight);

            context.DrawLine(pen,
                    new Point(StartPoint.X, StartPoint.Y),
                    new Point(EndPoint.X, EndPoint.Y));
        }

    }
}





** ODPoint.cs **
Path: .\OpenDraft\Core\ODGeometry\ODPoint.cs

ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODGeometry
{
    internal class ODPoint : ODElement
    {
        public float X { get; set; }
        public float Y { get; set; }
        public ODPoint(double x, double y)
        {
            X = (float)x;
            Y = (float)y;
        }

        public ODPoint(float x, float y)
        {
            X = x;
            Y = y;
        }
    }
}





** ODMath.cs **
Path: .\OpenDraft\Core\ODMath\ODMath.cs

ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenDraft.Core.ODMath
{
    public class Vector2
        {
        public float X { get; set; }
        public float Y { get; set; }
        public Vector2(float x, float y)
        {
            X = x;
            Y = y;
        }
        public static Vector2 operator +(Vector2 a, Vector2 b)
        {
            return new Vector2(a.X + b.X, a.Y + b.Y);
        }

        public static Vector2 operator -(Vector2 a, Vector2 b)
        {
            return new Vector2(a.X - b.X, a.Y - b.Y);
        }

        public static Vector2 operator *(Vector2 a, float scalar)
        {
            return new Vector2(a.X * scalar, a.Y * scalar);
        }
        
        public static Vector2 operator /(Vector2 a, float scalar)
        {
            if (scalar == 0)
                throw new DivideByZeroException("Cannot divide by zero.");
            return new Vector2(a.X / scalar, a.Y / scalar);
        }
        
        public float Magnitude()
        {
            return (float)Math.Sqrt(X * X + Y * Y);
        }
        
        public Vector2 Normalize()
        {
            float magnitude = Magnitude();
            if (magnitude == 0)
                throw new InvalidOperationException("Cannot normalize a zero vector.");
            return this / magnitude;
        }
        
        public override string ToString()
        {
            return $"({X}, {Y})";
        }
    }
}





** MainWindowViewModel.cs **
Path: .\OpenDraft\ViewModels\MainWindowViewModel.cs

ï»¿using OpenDraft.Core.ODData;
using OpenDraft.Core.ODGeometry;
using System.Collections.Generic;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace OpenDraft.ViewModels
{
    public class MainWindowViewModel : ViewModelBase
    {
        public ODDataManager DataManager { get; }

        public IEnumerable<ODElement> GeometryElements => DataManager.Elements;
        public ODLayerManager LayerManager => DataManager.LayerManager;


        public MainWindowViewModel()
        {
            // 3. Initialize the DataManager.
            DataManager = new ODDataManager();

            // You can add some sample data for testing here.
            // For example: DataManager.Elements.Add(new ODLine(...));

            
            // DEBUG SOME GEOMETRY
            ODLine line1 = new ODLine(new ODPoint(-100, -100), new ODPoint(-100, 100));
            DataManager.AddElement(line1);

            ODLine line2 = new ODLine(new ODPoint(-100, 100), new ODPoint(100, 100));
            DataManager.AddElement(line2);

            ODLine line3 = new ODLine(new ODPoint(100, 100), new ODPoint(100, -100));
            DataManager.AddElement(line3);

            ODLine line4 = new ODLine(new ODPoint(100, -100), new ODPoint(-100, -100));
            DataManager.AddElement(line4);


            DataManager.LayerManager.AddLayer("New Layer");
            DataManager.LayerManager.SetActiveLayer("New Layer");
            
            ODLayer? lay = DataManager.LayerManager.GetLayerByName("New Layer");

            if (lay != null)
                lay.Color = "#00FF00";

            // Origin Crosshair
            ODLine lineX = new ODLine(new ODPoint(-20, 0), new ODPoint(20, 0));
            DataManager.AddElement(lineX);

            ODLine lineY = new ODLine(new ODPoint(0, -20), new ODPoint(0, 20));
            DataManager.AddElement(lineY);


        }
    }
}





** ViewModelBase.cs **
Path: .\OpenDraft\ViewModels\ViewModelBase.cs

ï»¿using CommunityToolkit.Mvvm.ComponentModel;

namespace OpenDraft.ViewModels
{
    public class ViewModelBase : ObservableObject
    {
    }
}





** MainWindow.axaml **
Path: .\OpenDraft\Views\MainWindow.axaml

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:OpenDraft.ViewModels"
        xmlns:local="using:OpenDraft"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="OpenDraft.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="OpenDraft"
        WindowState="Maximized">

  <Design.DataContext>
    <vm:MainWindowViewModel/>
  </Design.DataContext>

  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>

    <!-- Use Grid.Row attached property -->
    <local:Viewport Grid.Row="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Elements="{Binding GeometryElements}"
                    LayerManager="{Binding LayerManager}"/>
  </Grid>
</Window>





** MainWindow.axaml.cs **
Path: .\OpenDraft\Views\MainWindow.axaml.cs

using Avalonia.Controls;
using OpenDraft.Core.ODData;
using OpenDraft.Core.ODGeometry;

namespace OpenDraft.Views
{
    public partial class MainWindow : Window
    {
        public ODDataManager Data { get; } = new ODDataManager();

        public MainWindow()
        {
            InitializeComponent();
        }
    }
}


